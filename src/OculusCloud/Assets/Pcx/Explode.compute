#pragma kernel Main

#include "HLSLSupport.cginc"
#include "../Pcx/Shaders/Common.cginc"

StructuredBuffer<float4> SourceBuffer;
StructuredBuffer<float> Times;
RWStructuredBuffer<float4> OutputBuffer;
RWStructuredBuffer<float3> Velocities;

CBUFFER_START(Params)
    float Time;
	float Param1;
	float Param2;
	float Param3;
	int PointCount;
CBUFFER_END


[numthreads(128, 1, 1)]
void Main(uint id : SV_DispatchThreadID) {
    float4 target = SourceBuffer[id];
	float3 position = OutputBuffer[id].xyz;
	float3 velocity = Velocities[id];
	float targetTime = Times[id];

	float4 newPoint = float4(0.0, 0.0, 0.0, 0.0);
	float3 acceleration = float3(0.0, 0.0, 0.0);
	if (Time > Param3) {
		float effectiveTime = Time - Param3;
		float STARRY_NIGHT = 10.0;
		if (effectiveTime < STARRY_NIGHT) {
			half color = (effectiveTime > targetTime) ? 255 : 0;
			newPoint.w = asfloat(PcxEncodeColor(half3(color, color, color) * 0xff * 16 / (255 * 255)));

		} else {
			effectiveTime -= STARRY_NIGHT;

			// Steering behavior
			float3 desired = target.xyz - position;
			float magnitude = sqrt(desired.x * desired.x + desired.y * desired.y + desired.z * desired.z);
			float speed = 0.2;
			if (effectiveTime < 1.5) {
				// Bouncy ball of goodness not complete yet, small deacceleration
				if (magnitude < 1) {
					speed = (0.1 / 1) * magnitude;
				}
			}
			else {
				// Deaccelerate incoming particles
				if (magnitude < 6) {
					speed = (0.07 / 5) * magnitude;
				}
			}
			desired *= (speed / magnitude);
			float3 steer = desired - velocity;
			float steerMagnitude = sqrt(steer.x * steer.x + steer.y * steer.y + steer.z * steer.z);
			if (steerMagnitude > 0.1) {
				steer *= (0.01 / steerMagnitude);
			}
			acceleration += steer;

			// Color
			half3 color = PcxDecodeColor(asuint(target.w));
			float l = length(target.xy);
			color *= 1 + pow(abs(sin(l * 0.27 - Time * 1.1)), 20);
			newPoint.w = asfloat(PcxEncodeColor(color));
		}

	}

	// Position
	newPoint.xyz = position + velocity;
	velocity += acceleration;

    OutputBuffer[id] = newPoint;
	Velocities[id] = velocity;
}
