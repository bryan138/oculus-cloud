#pragma kernel Main

#include "HLSLSupport.cginc"
#include "../Pcx/Shaders/Common.cginc"

StructuredBuffer<float4> SourceBuffer;
RWStructuredBuffer<float4> OutputBuffer;

RWStructuredBuffer<float3> Velocities;
StructuredBuffer<float> Times;
StructuredBuffer<float> Hands;

CBUFFER_START(Params)
	float BLACK_VOID;
	float STARRY_NIGHT;

	float time;
	float scale;
CBUFFER_END

float getMagnitude(float3 vec) {
	return sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
}

[numthreads(128, 1, 1)]
void Main(uint id : SV_DispatchThreadID) {
    float3 target = SourceBuffer[id].xyz;
	float3 position = OutputBuffer[id].xyz;
	float3 velocity = Velocities[id];
	float targetTime = Times[id];

	float3 leftHand = float3(Hands[0], Hands[1], Hands[2]);
	float leftRadius = Hands[3];
	float leftForce = Hands[4];
	float3 rightHand = float3(Hands[5], Hands[6], Hands[7]);
	float rightRadius = Hands[8];
	float rightForce = Hands[9];

	float4 newPoint = float4(0.0, 0.0, 0.0, 0.0);
	float3 acceleration = float3(0.0, 0.0, 0.0);
	if (time > BLACK_VOID) {
		float effectiveTime = time - BLACK_VOID;
		if (effectiveTime < STARRY_NIGHT) {
			half color = (effectiveTime > targetTime) ? 255 : 0;
			newPoint.w = asfloat(PcxEncodeColor(half3(color, color, color) * 0xff * 16 / (255 * 255)));

		} else {
			effectiveTime -= STARRY_NIGHT;

			// Steering behavior
			float3 desired = target - position;
			float magnitude = getMagnitude(desired);
			float speed = 0.2;
			if (effectiveTime < 1.5) {
				// Bouncy ball of goodness not complete yet, small deacceleration
				if (magnitude < 1) {
					speed = (0.1 / 1) * magnitude;
				}
			} else {
				// Deaccelerate incoming particles
				if (magnitude < 6) {
					speed = (0.07 / 5) * magnitude;
				}
			}
			desired *= (speed / magnitude);
			float3 steer = desired - velocity;
			float steerMagnitude = getMagnitude(steer);
			if (steerMagnitude > 0.1) {
				steer *= (0.01 / steerMagnitude);
			}
			acceleration += steer;

			// Left hand
			desired = leftHand - position;
			magnitude = getMagnitude(desired);
			if (magnitude < leftRadius) {
				speed = leftForce;
				desired *= (speed / magnitude);
				steer = desired - velocity;
				steerMagnitude = getMagnitude(steer);
				if (steerMagnitude > 0.05) {
					steer *= (0.05 / steerMagnitude);
				}
				acceleration += steer;
			}

			// Right hand
			desired = rightHand - position;
			magnitude = getMagnitude(desired);
			if (magnitude < rightRadius) {
				speed = rightForce;
				desired *= (speed / magnitude);
				desired *= -1;
				steer = desired - velocity;
				steerMagnitude = getMagnitude(steer);
				if (steerMagnitude > 0.05) {
					steer *= (0.05 / steerMagnitude);
				}
				acceleration += steer;
			}

			// Color
			half3 color = PcxDecodeColor(asuint(SourceBuffer[id].w));
			float l = length(SourceBuffer[id].xy);
			color *= 1 + pow(abs(sin(l * 0.27 - time * 1.1)), 20);
			newPoint.w = asfloat(PcxEncodeColor(color));
		}

	}

	// Position
	newPoint.xyz = position + velocity;
	velocity += acceleration;

    OutputBuffer[id] = newPoint;
	Velocities[id] = velocity;
}
