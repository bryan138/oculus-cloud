#pragma kernel Main

#include "HLSLSupport.cginc"
#include "../Pcx/Shaders/Common.cginc"

StructuredBuffer<float4> SourceBuffer;
StructuredBuffer<float> Times;
RWStructuredBuffer<float4> OutputBuffer;

CBUFFER_START(Params)
    float Time;
	float Param1;
	float Param2;
	float Param3;
	int PointCount;
CBUFFER_END

[numthreads(128, 1, 1)]
void Main(uint id : SV_DispatchThreadID) {
    float4 target = SourceBuffer[id];
	float3 position = OutputBuffer[id].xyz;
    half3 color = PcxDecodeColor(asuint(target.w));
	float targetTime = Times[id];

	if (Time < targetTime + Param3) {
		float progress = (Time < Param3) ? 1 : ((targetTime - (Time - Param3)) / targetTime);

		float easeOut = (2 - progress) * progress;
		float easeOutCubic = (--progress) * progress * progress + 1;
		float easeIn = progress * progress;
		//float easeInCubic = progress * progress * progress * progress;
		//float easeLinear = progress;
		//target.xyz *= max(1, (Param2 * easeOutCubic));
	}

	target.xyz = position;

	float l = length(target.xy);
	color *= 1 + pow(abs(sin(l * 0.27 - Time * 1.1)), 20);

    target.w = asfloat(PcxEncodeColor(color));
    OutputBuffer[id] = target;
}
